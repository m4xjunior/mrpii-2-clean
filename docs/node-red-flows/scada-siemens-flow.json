[
  {
    "id": "f1d9c8e5.2b3648",
    "type": "tab",
    "label": "SCADA Siemens ‚Üí N8N",
    "disabled": false,
    "info": "Flow completo para ler dados do Siemens S7 e enviar para N8N"
  },
  {
    "id": "plc1.endpoint",
    "type": "s7 endpoint",
    "name": "PLC DOBL10",
    "transport": "iso-on-tcp",
    "address": "192.168.1.100",
    "port": "102",
    "rack": "0",
    "slot": "1",
    "localtsaphi": "01",
    "localtsaplo": "00",
    "remotetsaphi": "01",
    "remotetsaplo": "00",
    "connmode": "rack-slot",
    "adapter": "",
    "busaddr": "2",
    "cycletime": "1000",
    "timeout": "2000"
  },
  {
    "id": "inject.poll",
    "type": "inject",
    "z": "f1d9c8e5.2b3648",
    "name": "Polling 5 segundos",
    "props": [{"p": "payload"}],
    "repeat": "5",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 160,
    "y": 100,
    "wires": [["s7.read.all"]]
  },
  {
    "id": "s7.read.all",
    "type": "s7 in",
    "z": "f1d9c8e5.2b3648",
    "endpoint": "plc1.endpoint",
    "mode": "all-split",
    "variable": "DB100,INT0;DB100,INT2;DB100,INT4;DB100,REAL6;DB100,X10.0;DB100,X10.1;DB100,STRING12.20",
    "diff": false,
    "name": "Ler Dados PLC",
    "x": 360,
    "y": 100,
    "wires": [["function.process"]]
  },
  {
    "id": "function.process",
    "type": "function",
    "z": "f1d9c8e5.2b3648",
    "name": "Processar Dados",
    "func": "// Mapear dados do PLC para formato SCADA\nconst plcData = msg.payload;\n\n// Estrutura esperada pelo N8N/Next.js\nconst scadaData = {\n  info_maquina: {\n    codigo: 'DOBL10',\n    nombre: 'Dobladora 10',\n    tipo: 'DOBLADORA'\n  },\n  estado: {\n    actual: plcData[4] ? 'PRODUCCION' : 'PARADA',\n    alarma: plcData[5] ? 'ALARME_ATIVO' : 'OK'\n  },\n  produccion: {\n    ok: plcData[0] || 0,\n    nok: plcData[1] || 0,\n    total: plcData[2] || 0,\n    calidad: plcData[2] > 0 ? ((plcData[0] / plcData[2]) * 100).toFixed(2) : 0\n  },\n  velocidad: {\n    actual: plcData[3] || 0,\n    unidad: 'm/min'\n  },\n  orden_fabricacion: {\n    codigo: plcData[6] || '--',\n    estado: 'EN_CURSO'\n  },\n  timestamp: new Date().toISOString(),\n  source: 'node-red-s7'\n};\n\n// Calcular m√©tricas\nconst total = scadaData.produccion.total;\nconst ok = scadaData.produccion.ok;\nconst nok = scadaData.produccion.nok;\n\nscadaData.metricas_turno = {\n  oee: 0, // Calcular se houver dados de disponibilidade\n  disponibilidad: plcData[4] ? 100 : 0,\n  rendimiento: 0, // Calcular com velocidade ideal\n  calidad: total > 0 ? ((ok / total) * 100) : 0\n};\n\nmsg.payload = scadaData;\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 100,
    "wires": [["debug.output", "http.to.n8n", "context.save"]]
  },
  {
    "id": "context.save",
    "type": "function",
    "z": "f1d9c8e5.2b3648",
    "name": "Salvar no Contexto Global",
    "func": "// Salvar dados no contexto global para API REST\nconst machines = global.get('machines') || {};\nconst machineCode = msg.payload.info_maquina.codigo;\n\nmachines[machineCode] = msg.payload;\nglobal.set('machines', machines);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 840,
    "y": 160,
    "wires": [[]]
  },
  {
    "id": "http.to.n8n",
    "type": "http request",
    "z": "f1d9c8e5.2b3648",
    "name": "POST ‚Üí N8N Webhook",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://n8n.lexusfx.com/webhook/scada",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 840,
    "y": 100,
    "wires": [["debug.n8n.response"]]
  },
  {
    "id": "debug.output",
    "type": "debug",
    "z": "f1d9c8e5.2b3648",
    "name": "Debug Dados Processados",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 40,
    "wires": []
  },
  {
    "id": "debug.n8n.response",
    "type": "debug",
    "z": "f1d9c8e5.2b3648",
    "name": "Debug N8N Response",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 1080,
    "y": 100,
    "wires": []
  },
  {
    "id": "http.in.machines",
    "type": "http in",
    "z": "f1d9c8e5.2b3648",
    "name": "GET /scada/machines",
    "url": "/scada/machines",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 180,
    "y": 260,
    "wires": [["function.get.all"]]
  },
  {
    "id": "function.get.all",
    "type": "function",
    "z": "f1d9c8e5.2b3648",
    "name": "Buscar Todas M√°quinas",
    "func": "// Buscar do contexto global\nconst machines = global.get('machines') || {};\n\n// Converter objeto para array\nconst machinesArray = Object.values(machines);\n\nmsg.payload = machinesArray;\nmsg.statusCode = 200;\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Access-Control-Allow-Origin': '*'\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 420,
    "y": 260,
    "wires": [["http.response"]]
  },
  {
    "id": "http.response",
    "type": "http response",
    "z": "f1d9c8e5.2b3648",
    "name": "Response JSON",
    "statusCode": "",
    "headers": {},
    "x": 640,
    "y": 260,
    "wires": []
  },
  {
    "id": "http.in.machine",
    "type": "http in",
    "z": "f1d9c8e5.2b3648",
    "name": "GET /scada/machine/:id",
    "url": "/scada/machine/:id",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 190,
    "y": 320,
    "wires": [["function.get.one"]]
  },
  {
    "id": "function.get.one",
    "type": "function",
    "z": "f1d9c8e5.2b3648",
    "name": "Buscar M√°quina por ID",
    "func": "const machineId = msg.req.params.id;\nconst machines = global.get('machines') || {};\n\nconst machine = machines[machineId];\n\nif (machine) {\n  msg.payload = machine;\n  msg.statusCode = 200;\n} else {\n  msg.payload = { error: 'M√°quina n√£o encontrada' };\n  msg.statusCode = 404;\n}\n\nmsg.headers = {\n  'Content-Type': 'application/json',\n  'Access-Control-Allow-Origin': '*'\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 440,
    "y": 320,
    "wires": [["http.response"]]
  },
  {
    "id": "comment.1",
    "type": "comment",
    "z": "f1d9c8e5.2b3648",
    "name": "üìä POLLING - Ler dados do PLC a cada 5 segundos",
    "info": "",
    "x": 220,
    "y": 60,
    "wires": []
  },
  {
    "id": "comment.2",
    "type": "comment",
    "z": "f1d9c8e5.2b3648",
    "name": "üåê API REST - Endpoints para consulta direta",
    "info": "",
    "x": 210,
    "y": 220,
    "wires": []
  },
  {
    "id": "status.monitor",
    "type": "status",
    "z": "f1d9c8e5.2b3648",
    "name": "Monitor Conex√£o PLC",
    "scope": ["s7.read.all"],
    "x": 170,
    "y": 400,
    "wires": [["function.alert"]]
  },
  {
    "id": "function.alert",
    "type": "function",
    "z": "f1d9c8e5.2b3648",
    "name": "Alerta Desconex√£o",
    "func": "if (msg.status.text === 'error') {\n  msg.payload = {\n    alert: 'CONEX√ÉO PERDIDA COM PLC',\n    machine: 'DOBL10',\n    timestamp: new Date().toISOString(),\n    severity: 'CRITICAL'\n  };\n  return msg;\n}\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "x": 380,
    "y": 400,
    "wires": [["debug.alert", "http.alert.n8n"]]
  },
  {
    "id": "debug.alert",
    "type": "debug",
    "z": "f1d9c8e5.2b3648",
    "name": "Debug Alertas",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 600,
    "y": 380,
    "wires": []
  },
  {
    "id": "http.alert.n8n",
    "type": "http request",
    "z": "f1d9c8e5.2b3648",
    "name": "Enviar Alerta para N8N",
    "method": "POST",
    "ret": "txt",
    "url": "https://n8n.lexusfx.com/webhook/alerts",
    "tls": "",
    "x": 630,
    "y": 420,
    "wires": [[]]
  },
  {
    "id": "comment.3",
    "type": "comment",
    "z": "f1d9c8e5.2b3648",
    "name": "‚ö†Ô∏è MONITORAMENTO - Detectar falhas de conex√£o",
    "info": "",
    "x": 230,
    "y": 360,
    "wires": []
  }
]
